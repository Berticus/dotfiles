#!/usr/bin/env python
# -*- condig: utf-8 -*-
import os
import sys
import random
import string
import readline
import datetime
import pdb

# Word completion for GNU readline
import rlcompleter

# Allow programmer to define multiple exit functions to be executed upon normal
# program termination
import atexit

# Support pretty-print lists, tubles, & dictionaries recursively
import pprint

# Utilities needed to emulate Python's interactive interpreter
import code

# Temporary files
import tempfile

# Color support
class TermColors(dict):
    """Gives easy access to ANSI color codes. Attempts to fall back to no color
       for certain TERM values. (Mostly stolen from IPython.)"""

    BLACK = "Black"
    RED = "Red"
    GREEN = "Green"
    BROWN = "Brown"
    BLUE = "Blue"
    PURPLE = "Purple"
    CYAN = "Cyan"
    LIGHT_GRAY = "LightGray"
    DARK_GRAY = "DarkGray"
    LIGHT_RED = "LightRed"
    LIGHT_GREEN = "LightGreen"
    YELLOW = "Yellow"
    LIGHT_BLUE = "LightBlue"
    LIGHT_PURPLE = "LightPurple"
    LIGHT_CYAN = "LightCyan"
    WHITE = "White"
    NORMAL = "Normal"
    NoColor = ''
    _base = '\001\033[%sm\002'

    COLOR_TEMPLATES = (
        (BLACK       , "0;30"),
        (RED         , "0;31"),
        (GREEN       , "0;32"),
        (BROWN       , "0;33"),
        (BLUE        , "0;34"),
        (PURPLE      , "0;35"),
        (CYAN        , "0;36"),
        (LIGHT_GRAY  , "0;37"),
        (DARK_GRAY   , "1;30"),
        (LIGHT_RED   , "1;31"),
        (LIGHT_GREEN , "1;32"),
        (YELLOW      , "1;33"),
        (LIGHT_BLUE  , "1;34"),
        (LIGHT_PURPLE, "1;35"),
        (LIGHT_CYAN  , "1;36"),
        (WHITE       , "1;37"),
        (NORMAL      , "0"),
    )

    def __init__(self):
        if os.environ.get("TERM") in (
                'xterm-color'
                'xterm-256color',
                'linux',
                'screen',
                'screen-256color',
                'screen-bce',
            ):
            self.update(dict([(k, self._base % v) for k,v in self.COLOR_TEMPLATES]))
        else:
            self.update(dict([(k, self.NoColor) for k,v in self.COLOR_TEMPLATES]))

_c = TermColors()

# Enable history
HISTFILE="%s/.pyhistory" % os.environ['HOME']

# Read the existing history if there is one
if os.path.exists(HISTFILE):
    readline.read_history_file(HISTFILE)

# Set maximum number of items that will be written to the history file
readline.set_history_length(200000)

def savehist():
    readline.write_history_file(HISTFILE)

atexit.register(savehist)

# Enable color prompts
sys.ps1 = '%s>>> %s' % (_c[TermColors.GREEN], _c[TermColors.NORMAL])
sys.ps2 = '%s... %s' % (_c[TermColors.RED], _c[TermColors.NORMAL])

# Pretty print for stdout
def my_displayhook(value):
    if value is not None:
        try:
            import __builtin__
            __builtin__._ = value
        except ImportError:
            __builtins__._ = value

        pprint.pprint(value)
sys.displayhook = my_displayhook

WELCOME=""
atexit.register(lambda: sys.stdout.write("""Bye!
"""))

# Start an external editor with \e
# http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/438813/

EDITOR = os.environ.get('EDITOR', 'vi')
EDIT_CMD = '\e'

class EditableBufferInteractiveConsole(code.InteractiveConsole):
    def __init__(self, *args, **kwargs):
        self.last_buffer = [] # This holds the last executed statement
        code.InteractiveConsole.__init__(self, *args, **kwargs)

    def runsource(self, source, *args):
        self.last_buffer = [ source.encode('utf-8') ]
        return code.InteractiveConsole.runsource(self, source, *args)
    def raw_input(self, *args):
        line = code.InteractiveConsole.raw_input(self, *args)
        if line == EDIT_CMD:
            fd, tmpfl = tempfile.mkstemp('.py')
            os.write(fd, b'\n'.join(self.last_buffer))
            os.close(fd)
            os.system('%s %s' % (EDITOR, tmpfl))
            line = open(tmpfl).read()
            os.unlink(tmpfl)
            tmpfl = ''
            lines = line.split( '\n' )
            for i in range(len(lines) - 1): self.push( lines[i] )
            line = lines[-1]
        return line

c = EditableBufferInteractiveConsole(locals=locals())
c.interact(banner=WELCOME)

# Exit the Python shell on exiting the InteractiveConsole
sys.exit()
